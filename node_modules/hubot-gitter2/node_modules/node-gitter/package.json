{
  "name": "node-gitter",
  "version": "1.2.2",
  "description": "Gitter client",
  "main": "lib/gitter.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha -R spec test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gitterHQ/node-gitter"
  },
  "keywords": [
    "gitter"
  ],
  "author": {
    "name": "Mauro Pompilio"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/gitterHQ/node-gitter/issues"
  },
  "homepage": "https://github.com/gitterHQ/node-gitter",
  "dependencies": {
    "q": "~1.0.1",
    "eventemitter2": "~0.4.13",
    "qs": "~1.2.1",
    "faye": "~1.0.1",
    "debug": "^0.8.1"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "retire": "latest"
  },
  "readme": "# node-gitter [![Gitter chat](https://badges.gitter.im/gitterhq/node-gitter.png)](https://gitter.im/gitterhq/node-gitter)\n\nNode.js client for the [Gitter](https://gitter.im) API. For more info visit: [Gitter Developers website](https://developer.gitter.im).\n\nIf you have any questions, click on the badge to join the conversation.\n\n## Installation\n```\n$ npm install --save node-gitter\n```\n\n## Basics\n\n```js\nvar Gitter = require('node-gitter');\n\nvar gitter = new Gitter(token);\n\ngitter.currentUser()\n.then(function(user) {\n  console.log('You are logged in as:', user.username);\n});\n```\n\n### Authentication\n\nIt's mandatory to provide a valid Gitter OAuth token in order to use the client. You can obtain one from [https://developer.gitter.im/apps](https://developer.gitter.im/apps).\n\n### Promises or Callbacks\n\nThe client implements both. The following code is equivalent:\n\nUsing promises:\n\n```js\ngitter.rooms.join('gitterhq/sandbox')\n.then(function(room) {\n  console.log('Joined room: ', room.name);\n})\n.fail(function(err) {\n  console.log('Not possible to join the room: ', err);\n})\n```\n\nUsing node-style callbacks:\n\n```js\ngitter.rooms.join('gitterhq/sandbox', function(err, room) {\n  if (err) {\n    console.log('Not possible to join the room: ', err);\n    return;\n  }\n\n  console.log('Joined room: ', room.name);\n});\n\n```\n\n## Users\n\n### Current user\n```js\ngitter.currentUser()\n```\n\n### Current user rooms, repos, orgs and channels\n```js\ngitter.currentUser()\n.then(function(user) {\n  user.rooms()\n  user.repos()\n  user.orgs()\n  user.channels()\n})\n```\n\n### Find a user\n```js\ngitter.users.find(userId)\n```\n\n## Rooms\n\n### Join a room\n```js\ngitter.rooms.join('gitterhq/sandbox')\n```\n\n### Post a message to a room\n```js\ngitter.rooms.join('gitterhq/sandbox')\n.then(function(room) {\n  room.send('Hello world!');\n});\n\n```\n\n### Listen for chatMessages, Events or Users in a room\n```js\ngitter.rooms.find(roomId).then(function(room) {\n\n  var events = room.streaming().chatMessages();\n\n  // The 'snapshot' event is emitted once, with the last messages in the room\n  events.on('snapshot', function(snapshot) {\n    console.log(snapshot.length + ' messages in the snapshot');\n  });\n\n  // The 'chatMessages' event is emitted on each new message\n  events.on('chatMessages', function(message) {\n    console.log('A message was ' + message.operation);\n    console.log('Text: ', message.model.text);\n  });\n});\n```\n\n\n### Listen for messages in a room\n```js\ngitter.rooms.join('gitterhq/sandbox').then(function(room) {\n  var events = room.listen();\n\n  events.on('message', function(message) {\n    console.log('New message:', message.text);\n  });\n});\n```\n\n### Room users, channels and messages\n```js\ngitter.rooms.find(roomId)\n.then(function(room) {\n  room.users()\n  room.channels()\n  room.chatMessages()\n});\n```\n\n### Leave a room\n```js\ngitter.rooms.find(roomId)\n.then(function(room) {\n  room.leave()\n});\n```\n\n# License\n\nBSD\n",
  "readmeFilename": "README.md",
  "_id": "node-gitter@1.2.2",
  "_from": "node-gitter@1.2.2"
}
