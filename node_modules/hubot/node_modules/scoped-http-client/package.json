{
  "name": "scoped-http-client",
  "description": "http client request wrapper",
  "version": "0.9.8",
  "author": {
    "name": "technoweenie"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "homepage": "https://github.com/technoweenie/node-scoped-http-client",
  "main": "./lib/index",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/technoweenie/node-scoped-http-client.git"
  },
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "coffee-script": "1.3.3"
  },
  "readme": "# Scoped HTTP Client for Node.js\n\n[Node.js's HTTP client][client] is great, but a little too low level for \ncommon purposes.  It's common practice for [some libraries][example] to\nextract this out so it's a bit nicer to work with.\n\n[client]:  http://nodejs.org/api.html#http-client-177\n[example]: http://github.com/technoweenie/nori/blob/2b4b367350e5d2aed982e8af869401ab5612378c/lib/index.js#L72-76\n\n```javascript\nfunction(method, path, customHeaders, body, callback) {\n  var client = http.createClient(url)\n  client.request(method, path, headers)\n  // ...\n}\n```\n\nI hate functions with lots of optional arguments.  Let's turn that into:\n\n```javascript\nvar scopedClient = require('./lib')\n  , util         = require('util')\n\nvar client = scopedClient.create('https://api.github.com')\n  .header('accept', 'application/json')\n  .path('user/show/technoweenie')\n  .get()(function(err, resp, body) {\n    util.puts(body)\n  })\n```\n\nYou can scope a client to make requests with certain parameters without\naffecting the main client instance:\n\n```javascript\nclient.path('https://api.github.com') // reset path\nclient.scope('users/technoweenie', function(cli) {\n  // cli's path is \"https://api.github.com/users/technoweenie\"\n  cli.get()(function(err, resp, body) {\n    util.puts(body)\n  })\n})\n\n// client's path is back to just \"https://api.github.com\"\n```\n\nYou can use `.post()`, `.put()`, `.del()`, and `.head()`.\n\n```javascript\nclient.query({login:'technoweenie',token:'...'})\n  .scope('users/technoweenie', function(cli) {\n    var data = JSON.stringify({location: 'SF'})\n\n    // posting data!\n    cli.post(data)(function(err, resp, body) {\n      util.puts(body)\n    })\n  })\n```\n\nSometimes you want to stream the request body to the server.  The request \nis a standard [http.clientRequest][request].\n\n```javascript\nclient.post(function (req) {\n  req.write(\"...\")\n  req.write(\"...\")\n})(function(err, resp, body) {\n  // ...\n})\n```\n\nAnd other times, you want to stream the response from the server.  Simply \nlisten for the request's response event yourself and omit the response \ncallback.\n\n```javascript\nclient.get(function (err, req) {\n  // do your own thing\n  req.addListener('response', function (resp) {\n    resp.addListener('data', function (chunk) {\n      util.puts(\"CHUNK: \" + chunk)\n    })\n  })\n})()\n```\n\n[request]: http://nodejs.org/api.html#http-clientrequest-182\n\nBasic HTTP authentication is supported:\n\n```javascript\nclient.get(function (err, req) {\n  // we'll keep this conversation secret...\n  req.auth('technoweenie', '...')\n})\n```\n\n## Development\n\nRun this in the main directory to compile coffeescript to javascript as you go:\n\n    $ coffee -wc -o lib --no-wrap src/**/*.coffee\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/technoweenie/node-scoped-http-client/issues"
  },
  "_id": "scoped-http-client@0.9.8",
  "_from": "scoped-http-client@0.9.8"
}
